// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3016000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3016000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto;
namespace Message {
class BinlogMessage;
struct BinlogMessageDefaultTypeInternal;
extern BinlogMessageDefaultTypeInternal _BinlogMessage_default_instance_;
class DictValue;
struct DictValueDefaultTypeInternal;
extern DictValueDefaultTypeInternal _DictValue_default_instance_;
class DocId;
struct DocIdDefaultTypeInternal;
extern DocIdDefaultTypeInternal _DocId_default_instance_;
class Document;
struct DocumentDefaultTypeInternal;
extern DocumentDefaultTypeInternal _Document_default_instance_;
class FalconSearchStoreInfo;
struct FalconSearchStoreInfoDefaultTypeInternal;
extern FalconSearchStoreInfoDefaultTypeInternal _FalconSearchStoreInfo_default_instance_;
class FieldValue;
struct FieldValueDefaultTypeInternal;
extern FieldValueDefaultTypeInternal _FieldValue_default_instance_;
}  // namespace Message
PROTOBUF_NAMESPACE_OPEN
template<> ::Message::BinlogMessage* Arena::CreateMaybeMessage<::Message::BinlogMessage>(Arena*);
template<> ::Message::DictValue* Arena::CreateMaybeMessage<::Message::DictValue>(Arena*);
template<> ::Message::DocId* Arena::CreateMaybeMessage<::Message::DocId>(Arena*);
template<> ::Message::Document* Arena::CreateMaybeMessage<::Message::Document>(Arena*);
template<> ::Message::FalconSearchStoreInfo* Arena::CreateMaybeMessage<::Message::FalconSearchStoreInfo>(Arena*);
template<> ::Message::FieldValue* Arena::CreateMaybeMessage<::Message::FieldValue>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Message {

// ===================================================================

class FalconSearchStoreInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Message.FalconSearchStoreInfo) */ {
 public:
  inline FalconSearchStoreInfo() : FalconSearchStoreInfo(nullptr) {}
  ~FalconSearchStoreInfo() override;
  explicit constexpr FalconSearchStoreInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FalconSearchStoreInfo(const FalconSearchStoreInfo& from);
  FalconSearchStoreInfo(FalconSearchStoreInfo&& from) noexcept
    : FalconSearchStoreInfo() {
    *this = ::std::move(from);
  }

  inline FalconSearchStoreInfo& operator=(const FalconSearchStoreInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FalconSearchStoreInfo& operator=(FalconSearchStoreInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FalconSearchStoreInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const FalconSearchStoreInfo* internal_default_instance() {
    return reinterpret_cast<const FalconSearchStoreInfo*>(
               &_FalconSearchStoreInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FalconSearchStoreInfo& a, FalconSearchStoreInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FalconSearchStoreInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FalconSearchStoreInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FalconSearchStoreInfo* New() const final {
    return CreateMaybeMessage<FalconSearchStoreInfo>(nullptr);
  }

  FalconSearchStoreInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FalconSearchStoreInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FalconSearchStoreInfo& from);
  void MergeFrom(const FalconSearchStoreInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FalconSearchStoreInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Message.FalconSearchStoreInfo";
  }
  protected:
  explicit FalconSearchStoreInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStoreNameFieldNumber = 1,
    kStoreLengthFieldNumber = 2,
  };
  // string StoreName = 1;
  void clear_storename();
  const std::string& storename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_storename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_storename();
  std::string* release_storename();
  void set_allocated_storename(std::string* storename);
  private:
  const std::string& _internal_storename() const;
  void _internal_set_storename(const std::string& value);
  std::string* _internal_mutable_storename();
  public:

  // int64 StoreLength = 2;
  void clear_storelength();
  ::PROTOBUF_NAMESPACE_ID::int64 storelength() const;
  void set_storelength(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_storelength() const;
  void _internal_set_storelength(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Message.FalconSearchStoreInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr storename_;
  ::PROTOBUF_NAMESPACE_ID::int64 storelength_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class BinlogMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Message.BinlogMessage) */ {
 public:
  inline BinlogMessage() : BinlogMessage(nullptr) {}
  ~BinlogMessage() override;
  explicit constexpr BinlogMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BinlogMessage(const BinlogMessage& from);
  BinlogMessage(BinlogMessage&& from) noexcept
    : BinlogMessage() {
    *this = ::std::move(from);
  }

  inline BinlogMessage& operator=(const BinlogMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline BinlogMessage& operator=(BinlogMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BinlogMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const BinlogMessage* internal_default_instance() {
    return reinterpret_cast<const BinlogMessage*>(
               &_BinlogMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BinlogMessage& a, BinlogMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(BinlogMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BinlogMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BinlogMessage* New() const final {
    return CreateMaybeMessage<BinlogMessage>(nullptr);
  }

  BinlogMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BinlogMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BinlogMessage& from);
  void MergeFrom(const BinlogMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BinlogMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Message.BinlogMessage";
  }
  protected:
  explicit BinlogMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogDetailFieldNumber = 3,
    kLogIdFieldNumber = 1,
    kLogTimestampFieldNumber = 2,
  };
  // bytes LogDetail = 3;
  void clear_logdetail();
  const std::string& logdetail() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_logdetail(ArgT0&& arg0, ArgT... args);
  std::string* mutable_logdetail();
  std::string* release_logdetail();
  void set_allocated_logdetail(std::string* logdetail);
  private:
  const std::string& _internal_logdetail() const;
  void _internal_set_logdetail(const std::string& value);
  std::string* _internal_mutable_logdetail();
  public:

  // int64 LogId = 1;
  void clear_logid();
  ::PROTOBUF_NAMESPACE_ID::int64 logid() const;
  void set_logid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_logid() const;
  void _internal_set_logid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 LogTimestamp = 2;
  void clear_logtimestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 logtimestamp() const;
  void set_logtimestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_logtimestamp() const;
  void _internal_set_logtimestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Message.BinlogMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logdetail_;
  ::PROTOBUF_NAMESPACE_ID::int64 logid_;
  ::PROTOBUF_NAMESPACE_ID::int64 logtimestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class DictValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Message.DictValue) */ {
 public:
  inline DictValue() : DictValue(nullptr) {}
  ~DictValue() override;
  explicit constexpr DictValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DictValue(const DictValue& from);
  DictValue(DictValue&& from) noexcept
    : DictValue() {
    *this = ::std::move(from);
  }

  inline DictValue& operator=(const DictValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline DictValue& operator=(DictValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DictValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const DictValue* internal_default_instance() {
    return reinterpret_cast<const DictValue*>(
               &_DictValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DictValue& a, DictValue& b) {
    a.Swap(&b);
  }
  inline void Swap(DictValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DictValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DictValue* New() const final {
    return CreateMaybeMessage<DictValue>(nullptr);
  }

  DictValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DictValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DictValue& from);
  void MergeFrom(const DictValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DictValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Message.DictValue";
  }
  protected:
  explicit DictValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffsetFieldNumber = 1,
    kLengthFieldNumber = 2,
  };
  // uint64 Offset = 1;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::uint64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 Length = 2;
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::uint64 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_length() const;
  void _internal_set_length(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Message.DictValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 offset_;
  ::PROTOBUF_NAMESPACE_ID::uint64 length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class DocId PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Message.DocId) */ {
 public:
  inline DocId() : DocId(nullptr) {}
  ~DocId() override;
  explicit constexpr DocId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DocId(const DocId& from);
  DocId(DocId&& from) noexcept
    : DocId() {
    *this = ::std::move(from);
  }

  inline DocId& operator=(const DocId& from) {
    CopyFrom(from);
    return *this;
  }
  inline DocId& operator=(DocId&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DocId& default_instance() {
    return *internal_default_instance();
  }
  static inline const DocId* internal_default_instance() {
    return reinterpret_cast<const DocId*>(
               &_DocId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DocId& a, DocId& b) {
    a.Swap(&b);
  }
  inline void Swap(DocId* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DocId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DocId* New() const final {
    return CreateMaybeMessage<DocId>(nullptr);
  }

  DocId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DocId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DocId& from);
  void MergeFrom(const DocId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DocId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Message.DocId";
  }
  protected:
  explicit DocId(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDocIDFieldNumber = 1,
    kWeightFieldNumber = 2,
  };
  // uint32 DocID = 1;
  void clear_docid();
  ::PROTOBUF_NAMESPACE_ID::uint32 docid() const;
  void set_docid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_docid() const;
  void _internal_set_docid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 Weight = 2;
  void clear_weight();
  ::PROTOBUF_NAMESPACE_ID::uint32 weight() const;
  void set_weight(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_weight() const;
  void _internal_set_weight(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Message.DocId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 docid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 weight_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class FieldValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Message.FieldValue) */ {
 public:
  inline FieldValue() : FieldValue(nullptr) {}
  ~FieldValue() override;
  explicit constexpr FieldValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FieldValue(const FieldValue& from);
  FieldValue(FieldValue&& from) noexcept
    : FieldValue() {
    *this = ::std::move(from);
  }

  inline FieldValue& operator=(const FieldValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldValue& operator=(FieldValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FieldValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const FieldValue* internal_default_instance() {
    return reinterpret_cast<const FieldValue*>(
               &_FieldValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FieldValue& a, FieldValue& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FieldValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FieldValue* New() const final {
    return CreateMaybeMessage<FieldValue>(nullptr);
  }

  FieldValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FieldValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FieldValue& from);
  void MergeFrom(const FieldValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Message.FieldValue";
  }
  protected:
  explicit FieldValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string field = 1;
  void clear_field();
  const std::string& field() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_field(ArgT0&& arg0, ArgT... args);
  std::string* mutable_field();
  std::string* release_field();
  void set_allocated_field(std::string* field);
  private:
  const std::string& _internal_field() const;
  void _internal_set_field(const std::string& value);
  std::string* _internal_mutable_field();
  public:

  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:Message.FieldValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class Document PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Message.Document) */ {
 public:
  inline Document() : Document(nullptr) {}
  ~Document() override;
  explicit constexpr Document(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Document(const Document& from);
  Document(Document&& from) noexcept
    : Document() {
    *this = ::std::move(from);
  }

  inline Document& operator=(const Document& from) {
    CopyFrom(from);
    return *this;
  }
  inline Document& operator=(Document&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Document& default_instance() {
    return *internal_default_instance();
  }
  static inline const Document* internal_default_instance() {
    return reinterpret_cast<const Document*>(
               &_Document_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Document& a, Document& b) {
    a.Swap(&b);
  }
  inline void Swap(Document* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Document* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Document* New() const final {
    return CreateMaybeMessage<Document>(nullptr);
  }

  Document* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Document>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Document& from);
  void MergeFrom(const Document& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Document* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Message.Document";
  }
  protected:
  explicit Document(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValFieldNumber = 1,
  };
  // repeated .Message.FieldValue val = 1;
  int val_size() const;
  private:
  int _internal_val_size() const;
  public:
  void clear_val();
  ::Message::FieldValue* mutable_val(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Message::FieldValue >*
      mutable_val();
  private:
  const ::Message::FieldValue& _internal_val(int index) const;
  ::Message::FieldValue* _internal_add_val();
  public:
  const ::Message::FieldValue& val(int index) const;
  ::Message::FieldValue* add_val();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Message::FieldValue >&
      val() const;

  // @@protoc_insertion_point(class_scope:Message.Document)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Message::FieldValue > val_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FalconSearchStoreInfo

// string StoreName = 1;
inline void FalconSearchStoreInfo::clear_storename() {
  storename_.ClearToEmpty();
}
inline const std::string& FalconSearchStoreInfo::storename() const {
  // @@protoc_insertion_point(field_get:Message.FalconSearchStoreInfo.StoreName)
  return _internal_storename();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void FalconSearchStoreInfo::set_storename(ArgT0&& arg0, ArgT... args) {
 
 storename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:Message.FalconSearchStoreInfo.StoreName)
}
inline std::string* FalconSearchStoreInfo::mutable_storename() {
  // @@protoc_insertion_point(field_mutable:Message.FalconSearchStoreInfo.StoreName)
  return _internal_mutable_storename();
}
inline const std::string& FalconSearchStoreInfo::_internal_storename() const {
  return storename_.Get();
}
inline void FalconSearchStoreInfo::_internal_set_storename(const std::string& value) {
  
  storename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* FalconSearchStoreInfo::_internal_mutable_storename() {
  
  return storename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FalconSearchStoreInfo::release_storename() {
  // @@protoc_insertion_point(field_release:Message.FalconSearchStoreInfo.StoreName)
  return storename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FalconSearchStoreInfo::set_allocated_storename(std::string* storename) {
  if (storename != nullptr) {
    
  } else {
    
  }
  storename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), storename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Message.FalconSearchStoreInfo.StoreName)
}

// int64 StoreLength = 2;
inline void FalconSearchStoreInfo::clear_storelength() {
  storelength_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FalconSearchStoreInfo::_internal_storelength() const {
  return storelength_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FalconSearchStoreInfo::storelength() const {
  // @@protoc_insertion_point(field_get:Message.FalconSearchStoreInfo.StoreLength)
  return _internal_storelength();
}
inline void FalconSearchStoreInfo::_internal_set_storelength(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  storelength_ = value;
}
inline void FalconSearchStoreInfo::set_storelength(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_storelength(value);
  // @@protoc_insertion_point(field_set:Message.FalconSearchStoreInfo.StoreLength)
}

// -------------------------------------------------------------------

// BinlogMessage

// int64 LogId = 1;
inline void BinlogMessage::clear_logid() {
  logid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BinlogMessage::_internal_logid() const {
  return logid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BinlogMessage::logid() const {
  // @@protoc_insertion_point(field_get:Message.BinlogMessage.LogId)
  return _internal_logid();
}
inline void BinlogMessage::_internal_set_logid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  logid_ = value;
}
inline void BinlogMessage::set_logid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_logid(value);
  // @@protoc_insertion_point(field_set:Message.BinlogMessage.LogId)
}

// int64 LogTimestamp = 2;
inline void BinlogMessage::clear_logtimestamp() {
  logtimestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BinlogMessage::_internal_logtimestamp() const {
  return logtimestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BinlogMessage::logtimestamp() const {
  // @@protoc_insertion_point(field_get:Message.BinlogMessage.LogTimestamp)
  return _internal_logtimestamp();
}
inline void BinlogMessage::_internal_set_logtimestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  logtimestamp_ = value;
}
inline void BinlogMessage::set_logtimestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_logtimestamp(value);
  // @@protoc_insertion_point(field_set:Message.BinlogMessage.LogTimestamp)
}

// bytes LogDetail = 3;
inline void BinlogMessage::clear_logdetail() {
  logdetail_.ClearToEmpty();
}
inline const std::string& BinlogMessage::logdetail() const {
  // @@protoc_insertion_point(field_get:Message.BinlogMessage.LogDetail)
  return _internal_logdetail();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void BinlogMessage::set_logdetail(ArgT0&& arg0, ArgT... args) {
 
 logdetail_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:Message.BinlogMessage.LogDetail)
}
inline std::string* BinlogMessage::mutable_logdetail() {
  // @@protoc_insertion_point(field_mutable:Message.BinlogMessage.LogDetail)
  return _internal_mutable_logdetail();
}
inline const std::string& BinlogMessage::_internal_logdetail() const {
  return logdetail_.Get();
}
inline void BinlogMessage::_internal_set_logdetail(const std::string& value) {
  
  logdetail_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* BinlogMessage::_internal_mutable_logdetail() {
  
  return logdetail_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BinlogMessage::release_logdetail() {
  // @@protoc_insertion_point(field_release:Message.BinlogMessage.LogDetail)
  return logdetail_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BinlogMessage::set_allocated_logdetail(std::string* logdetail) {
  if (logdetail != nullptr) {
    
  } else {
    
  }
  logdetail_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), logdetail,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Message.BinlogMessage.LogDetail)
}

// -------------------------------------------------------------------

// DictValue

// uint64 Offset = 1;
inline void DictValue::clear_offset() {
  offset_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DictValue::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DictValue::offset() const {
  // @@protoc_insertion_point(field_get:Message.DictValue.Offset)
  return _internal_offset();
}
inline void DictValue::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  offset_ = value;
}
inline void DictValue::set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:Message.DictValue.Offset)
}

// uint64 Length = 2;
inline void DictValue::clear_length() {
  length_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DictValue::_internal_length() const {
  return length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DictValue::length() const {
  // @@protoc_insertion_point(field_get:Message.DictValue.Length)
  return _internal_length();
}
inline void DictValue::_internal_set_length(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  length_ = value;
}
inline void DictValue::set_length(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:Message.DictValue.Length)
}

// -------------------------------------------------------------------

// DocId

// uint32 DocID = 1;
inline void DocId::clear_docid() {
  docid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DocId::_internal_docid() const {
  return docid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DocId::docid() const {
  // @@protoc_insertion_point(field_get:Message.DocId.DocID)
  return _internal_docid();
}
inline void DocId::_internal_set_docid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  docid_ = value;
}
inline void DocId::set_docid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_docid(value);
  // @@protoc_insertion_point(field_set:Message.DocId.DocID)
}

// uint32 Weight = 2;
inline void DocId::clear_weight() {
  weight_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DocId::_internal_weight() const {
  return weight_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DocId::weight() const {
  // @@protoc_insertion_point(field_get:Message.DocId.Weight)
  return _internal_weight();
}
inline void DocId::_internal_set_weight(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  weight_ = value;
}
inline void DocId::set_weight(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:Message.DocId.Weight)
}

// -------------------------------------------------------------------

// FieldValue

// string field = 1;
inline void FieldValue::clear_field() {
  field_.ClearToEmpty();
}
inline const std::string& FieldValue::field() const {
  // @@protoc_insertion_point(field_get:Message.FieldValue.field)
  return _internal_field();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void FieldValue::set_field(ArgT0&& arg0, ArgT... args) {
 
 field_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:Message.FieldValue.field)
}
inline std::string* FieldValue::mutable_field() {
  // @@protoc_insertion_point(field_mutable:Message.FieldValue.field)
  return _internal_mutable_field();
}
inline const std::string& FieldValue::_internal_field() const {
  return field_.Get();
}
inline void FieldValue::_internal_set_field(const std::string& value) {
  
  field_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* FieldValue::_internal_mutable_field() {
  
  return field_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FieldValue::release_field() {
  // @@protoc_insertion_point(field_release:Message.FieldValue.field)
  return field_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FieldValue::set_allocated_field(std::string* field) {
  if (field != nullptr) {
    
  } else {
    
  }
  field_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), field,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Message.FieldValue.field)
}

// bytes value = 2;
inline void FieldValue::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& FieldValue::value() const {
  // @@protoc_insertion_point(field_get:Message.FieldValue.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void FieldValue::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:Message.FieldValue.value)
}
inline std::string* FieldValue::mutable_value() {
  // @@protoc_insertion_point(field_mutable:Message.FieldValue.value)
  return _internal_mutable_value();
}
inline const std::string& FieldValue::_internal_value() const {
  return value_.Get();
}
inline void FieldValue::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* FieldValue::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FieldValue::release_value() {
  // @@protoc_insertion_point(field_release:Message.FieldValue.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FieldValue::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Message.FieldValue.value)
}

// -------------------------------------------------------------------

// Document

// repeated .Message.FieldValue val = 1;
inline int Document::_internal_val_size() const {
  return val_.size();
}
inline int Document::val_size() const {
  return _internal_val_size();
}
inline void Document::clear_val() {
  val_.Clear();
}
inline ::Message::FieldValue* Document::mutable_val(int index) {
  // @@protoc_insertion_point(field_mutable:Message.Document.val)
  return val_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Message::FieldValue >*
Document::mutable_val() {
  // @@protoc_insertion_point(field_mutable_list:Message.Document.val)
  return &val_;
}
inline const ::Message::FieldValue& Document::_internal_val(int index) const {
  return val_.Get(index);
}
inline const ::Message::FieldValue& Document::val(int index) const {
  // @@protoc_insertion_point(field_get:Message.Document.val)
  return _internal_val(index);
}
inline ::Message::FieldValue* Document::_internal_add_val() {
  return val_.Add();
}
inline ::Message::FieldValue* Document::add_val() {
  // @@protoc_insertion_point(field_add:Message.Document.val)
  return _internal_add_val();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Message::FieldValue >&
Document::val() const {
  // @@protoc_insertion_point(field_list:Message.Document.val)
  return val_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Message

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
